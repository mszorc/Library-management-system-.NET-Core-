@model SBDlibrary.Models.Uzytkownicy
@{
    ViewData["Title"] = "ChangeRole";
}

<h1>ChangeRole</h1>

<form class="form-inline" method="post" novalidate>
    <div class="form-group mx-sm-3 mb-2">
        <input asp-for="email" class="form-control" placeholder="Email" />
        <span asp-validation-for="email" class="text-danger"></span>
    </div>
    <button type="submit" class="btn btn-primary mb-2">Search</button>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.imie)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.nazwisko)
            </th>
            <th>
                Klient
            </th>
            <th>
                Bibliotekarz
            </th>
            <th>
                Admin
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            @if (Model != null)
            {
                <td>
                    @Html.DisplayFor(modelItem => modelItem.email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => modelItem.imie)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => modelItem.nazwisko)
                </td>
                <td>
                    <input type="checkbox" onchange="@{await SetRole("Klient");}" @ViewBag.Klient />
                </td>
                <td>
                    <input type="checkbox" onchange="@{await SetRole("Bibliotekarz");}" @ViewBag.Bibliotekarz   />
                </td>
                <td>
                    <input type="checkbox" onchange="@{await SetRole("Admin");}" @ViewBag.Admin   />
                </td>
            }
        </tr>
    </tbody>
</table>

@using Microsoft.AspNetCore.Identity
@inject SignInManager<Uzytkownicy> SignInManager
@inject UserManager<Uzytkownicy> UserManager

@functions
{
    async Task SetRole(string role)
    {
        var user = await UserManager.FindByEmailAsync(Model.email);

        if (user != null)
        {
            if (await UserManager.IsInRoleAsync(user, role))
            {
                await UserManager.RemoveFromRoleAsync(user, role);
            }
            else
            {
                await UserManager.AddToRoleAsync(user, role);
            }
        }
    }
}



